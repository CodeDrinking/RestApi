let Joi,User,CustomErrorHandler;_99f‍.x([["default",()=>_99f‍.o]]);_99f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_99f‍.w("../../models",[["User",["User"],function(v){User=v}]]);_99f‍.w("../../Services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);



const RegisterController ={
    async register (req , res , next){





        const registerSchema = Joi.object({
            name :  Joi.string().min(3).max(30).required(),
            email :  Joi.string().email().required(),
            password :  Joi.string().pattern(new RegExp('[^a-zA-Z0-9]{3,30}$')),
            repeat_password :  Joi.ref('password')
        });

        const {error} =registerSchema.validate(req.body);

        if(error){
            return next(error)
        }
//check if user alredy in database
         try{ 
            const exist =  await User.exists({email : req.body.email});

            if(exist){
                return next(CustomErrorHandler.alreadyExists('this email is alredy taken'))
            }
        }
         catch(err){
            return next(err)
    
       }

    
         res.json( { msg : "Hello i am json" })
        
    }
}


_99f‍.d(RegisterController);